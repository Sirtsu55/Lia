#version 460
#extension GL_GOOGLE_include_directive : require
#include "intersections.h"


layout(local_size_x = 1, local_size_y = 1) in;
layout(set = 0, binding = 0, rgba16f) uniform image2D outTex;
layout(set = 0, binding = 2, std430) buffer voxelSDF
{
	uint StepAndMatID[];
};
layout(set = 0, binding = 3, std430) buffer voxelTree
{
	VoxelTree Trees[];
};

layout(set = 0, binding = 1, std140) uniform UN
{
	vec4 color;
	vec2 size;
//	vec4 Origin;
//	vec4 UpVector;
//	vec4 RightVector;

};


void main()
{
    ivec2 pos = ivec2( gl_GlobalInvocationID.xy );
	const vec2 pixelCenter = vec2(gl_GlobalInvocationID.xy ) + vec2(0.5f);
	float aspectRatio = size.x / size.y;

	vec2 UV = (-1.0 + 2.0 * pixelCenter.xy / size) * vec2(size.x/size.y, 1.0);
	
	vec3 bg = vec3(1);
	vec3 origin = vec3(10, -7, 0) ;
	
	//TODO: Rotate ray dir with rotation matrix for rotat ion
	vec3 rayDir = vec3(UV, 1.0);
	bool hit = false;

	

	for(int i = 0; i < 1; ++i)
	{
		VoxelTree t = Trees[i];
		float intersection = slabs(origin, rayDir, t.minAABB.xyz, t.maxAABB.xyz);

		if(intersection > 0.0)
		{
			uint steps = 0;
			//RAYMARCHING

			for(int i = 0; i < 1; ++i)
			{
				//Get place of the voxel intersected
				vec3 nsp = floor(((rayDir * (intersection + steps)) - t.minAABB.xyz) + origin);

				//Indexing is right for now
				uint bufLoc = uint(floor(t.GpuBufferStart + (nsp.z * 25) + (nsp.y * 5) + nsp.x));

				//extract values
				uint m = bufLoc % 2;

				//since there are 2 SDF in one uint, we divide by 2
				bufLoc /= 2;
				//Explanation: 2 SDF are packed in one uint32 
				//if bufLoc is even, then remainder is 0, then the SDF is in the first 16bits
				//otherwise the SDF is located in the other 16bits
				//steps are 4 bits therefore we bitshift 0xF


				steps = StepAndMatID[bufLoc] & (0xF << (m*16));

				if((bufLoc > t.GpuBufferEnd) || (bufLoc < t.GpuBufferStart))
				{
					bg = vec3(1,0,0);
					break;
				}
				if(steps == 0)
				{
					bg = vec3(0, 1, 0);
					break;
				}
				else
				{
					steps = StepAndMatID[bufLoc] & (0xF);
					bg = vec3(0, 0, 1);


				}


			}
		}

	}

	imageStore(outTex, ivec2(gl_GlobalInvocationID.xy), vec4(bg, 1.0));
}